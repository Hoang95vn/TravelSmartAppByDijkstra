/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SubPanel_Map.java
 *
 * Created on Mar 10, 2012, 12:10:55 PM
 */
package travelsmart;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.MouseInputAdapter;
import org.jdesktop.application.Application;

/**
 *
 * @author dato
 */
enum MapStatus{VIEW,EDIT_POINT,EDIT_LINE};
public class SubPanel_Map extends javax.swing.JPanel {

    MapStatus Status = MapStatus.VIEW;
    ViewListener vListener = new ViewListener();
    EditPointListener epListener = new EditPointListener();
    EditLineListener elListener = new EditLineListener();
    ArrayList<objPoint> selectingPoint = new ArrayList<objPoint>();
    
    /** Creates new form SubPanel_Map */
    public SubPanel_Map() {
        initComponents();        
        this.setLayout(null);
        this.setOpaque(false);
        this.addMouseListener(vListener);
        this.addMouseMotionListener(vListener);
        this.mapBg.bgUrl = Config.Map_Background;
    }
    
    @Override
    public void paintComponent(Graphics g){
        Graphics2D g2 = (Graphics2D)g;
        g2.drawImage(new ImageIcon(Config.Map_Background).getImage(), 0,0,this.getWidth(),this.getHeight(), this);
        
        super.paintComponent(g);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mapBg = new travelsmart.bgPanel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(travelsmart.TravelSmart.class).getContext().getResourceMap(SubPanel_Map.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        mapBg.setName("mapBg"); // NOI18N

        javax.swing.GroupLayout mapBgLayout = new javax.swing.GroupLayout(mapBg);
        mapBg.setLayout(mapBgLayout);
        mapBgLayout.setHorizontalGroup(
            mapBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        mapBgLayout.setVerticalGroup(
            mapBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(mapBg, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    for(objPoint p:TravelSmart.getApplication().pointCollect){
        p.refreshPoint();
    }
    this.repaint();
}//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private travelsmart.bgPanel mapBg;
    // End of variables declaration//GEN-END:variables
    void SearchDirection(objPoint start, objPoint end)
    {
        DijkstraAlgorithm DA = new DijkstraAlgorithm();
        ArrayList<objLine> result = DA.run(TravelSmart.getApplication().pointCollect, TravelSmart.getApplication().lineCollect, start, end);
        if(result!=null && !result.isEmpty()){
            ShowRouteSmart(result);
            TravelSmart.getView().searchDirectionPanel1.ShowResult(result,start);
        }
        else{
            JOptionPane.showMessageDialog(null, "Can not found any route!");
        }
    }
    
    private void ShowRouteSmart(ArrayList<objLine> result) {
        for(objLine l:TravelSmart.getApplication().lineCollect){
            if(result.contains(l)){
                l.SetLineState(2);
            }else l.SetLineState(0);
        }
    }
    
    protected void FillMap() {
        //Get data from text file
        TravelSmart.getApplication().pointCollect = FileProcess.getPoints();
        TravelSmart.getApplication().lineCollect = FileProcess.getLines(TravelSmart.getApplication().pointCollect);
        
        ArrayList<objLine> lineCollect = ((TravelSmart)Application.getInstance()).lineCollect;
        ArrayList<objPoint> pointCollect = ((TravelSmart)Application.getInstance()).pointCollect;
        for(objPoint p:pointCollect){
            this.add(p);
        }
        for(objLine l:lineCollect){
            this.add(l);
        }
    }
    
    protected void ChangeMapOption(MapStatus type){
        //Change map to edit status
        this.Status = type;
        switch(type){
            case VIEW:{
                //Change all lines, points to editing status
                for(objPoint p: TravelSmart.getApplication().pointCollect){
                    p.ChangeStatus(MapStatus.VIEW);
                }
                for(objLine l: TravelSmart.getApplication().lineCollect){
                    l.ChangeStatus(MapStatus.VIEW);
                    this.remove(l);
                    this.add(l);
                }
                //Clear Listeners
                this.removeMouseListener(vListener);
                this.removeMouseMotionListener(vListener);
                this.removeMouseListener(epListener);
                this.removeMouseMotionListener(epListener);
                this.removeMouseListener(elListener);
                this.removeMouseMotionListener(elListener);
                //Add edit point listener
                this.addMouseListener(vListener);
                this.addMouseMotionListener(vListener);
                break;
            }
            case EDIT_POINT:{
                //Change all lines, points to editing status
                for(objPoint p: TravelSmart.getApplication().pointCollect){
                    p.ChangeStatus(MapStatus.EDIT_POINT);
                }
                for(objLine l: TravelSmart.getApplication().lineCollect){
                    l.ChangeStatus(MapStatus.EDIT_POINT);
                    this.remove(l);
                }
                //Clear Listeners
                this.removeMouseListener(vListener);
                this.removeMouseMotionListener(vListener);
                this.removeMouseListener(epListener);
                this.removeMouseMotionListener(epListener);
                this.removeMouseListener(elListener);
                this.removeMouseMotionListener(elListener);
                //Add edit point listener
                this.addMouseListener(epListener);
                this.addMouseMotionListener(epListener);
                break;
            }
            case EDIT_LINE:{
                //Change all lines, points to editing status
                for(objPoint p: TravelSmart.getApplication().pointCollect){
                    p.ChangeStatus(MapStatus.EDIT_LINE);
                }
                for(objLine l: TravelSmart.getApplication().lineCollect){
                    l.ChangeStatus(MapStatus.EDIT_LINE);
                    this.remove(l);
                    this.add(l);
                }
                //Clear Listeners
                this.removeMouseListener(vListener);
                this.removeMouseMotionListener(vListener);
                this.removeMouseListener(epListener);
                this.removeMouseMotionListener(epListener);
                this.removeMouseListener(elListener);
                this.removeMouseMotionListener(elListener);
                //Add edit point listener
                this.addMouseListener(elListener);
                this.addMouseMotionListener(elListener);
                break;
            }
        }
        this.repaint();
    }

    void SearchPoint(String text,int type) {
        //type 0: search only 1 point, type 1: search point at find route
        
        switch(type){
            case 0:
                for(objPoint p:selectingPoint){
                    p.SetPointState(0);
                }
                selectingPoint.clear();
                for(objPoint p: TravelSmart.getApplication().pointCollect){
                    if(p.Name.toLowerCase().indexOf(text.toLowerCase())!= -1){
                        p.fireClick();   
                        break;
                    }
                }
                break;
            case 1:
                for(objPoint p: TravelSmart.getApplication().pointCollect){
                    if(p.Name.toLowerCase().indexOf(text.toLowerCase())!= -1){
                        p.fireClick();   
                        break;
                    }
                }
                break;
        }
    }
    
    //<editor-fold defaultstate="collapsed" desc="Mouse handler">
    //<editor-fold defaultstate="collapsed" desc="Mouse Event Handler in View">
    //Mouse Event Handler for view option
    class ViewListener extends MouseInputAdapter{
        //mouseClicked, mouseEntered, mouseExited, mousePressed, mouseReleased,mouseDragged, mouseMoved
        
        @Override
        public void mouseMoved(MouseEvent e){
            
        }
        
        @Override
        public void mouseExited(MouseEvent e){
        }
        
        @Override
        public void mouseClicked(MouseEvent e){
            for(objPoint p:selectingPoint){
                p.SetPointState(0);
            }
            for(objLine l:TravelSmart.getApplication().lineCollect)
            {
                l.SetLineState(0);
            }
            selectingPoint.clear();            
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Mouse Event Handler in Edit Point">
    //Mouse Event Handler for Edit option
    class EditPointListener extends MouseInputAdapter{
        //mouseClicked, mouseEntered, mouseExited, mousePressed, mouseReleased,mouseDragged, mouseMoved
        
        @Override
        public void mouseMoved(MouseEvent e){
            
        }
        
        @Override
        public void mouseExited(MouseEvent e){
            
        }
        
        @Override
        public void mouseClicked(MouseEvent e){            
            int x = (int)(Double.valueOf(e.getX() - Config.Map_Margin_LR)/Double.valueOf(TravelSmart.getView().pn_Map.getWidth()-2*Config.Map_Margin_LR)*1600);
            int y = (int)(Double.valueOf(e.getY() - Config.Map_Margin_TB)/Double.valueOf(TravelSmart.getView().pn_Map.getHeight()-2*Config.Map_Margin_TB)*900);
            if(x<0 || x>1600 || y<0 || y>900) e.consume();
            else{
                //Show popup adding point
                TravelSmart.getView().dgl_addPoint.showDgl(e);
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Mouse Event Handler in Edit Line">
    //Mouse Event Handler for Edit option
    class EditLineListener extends MouseInputAdapter{
        //mouseClicked, mouseEntered, mouseExited, mousePressed, mouseReleased,mouseDragged, mouseMoved
        
        @Override
        public void mouseMoved(MouseEvent e){
            
        }
        
        @Override
        public void mouseExited(MouseEvent e){
            
        }
        
        @Override
        public void mouseClicked(MouseEvent e){
            for(objPoint p:selectingPoint){
                p.SetPointState(0);
            }
            selectingPoint.clear();
        }
    }
    //</editor-fold>
    //</editor-fold>
    
}
